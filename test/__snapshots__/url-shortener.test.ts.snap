// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UrlShortenerStack matches the snapshot 1`] = `
{
  "Outputs": {
    "urlshortenerapiEndpoint32F30B14": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "urlshortenerapi76E828B8",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "urlshortenerapiDeploymentStageprod75F44E58",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "TableCD117FA1": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "generate532CE211": {
      "DependsOn": [
        "generateServiceRoleDefaultPolicy3181BDB4",
        "generateServiceRole6D137BEE",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "9b92a0f00164d2164deae8c0588edf6c90b91f08b6e1f2153d07e574b279c2f1.zip",
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "TableCD117FA1",
            },
          },
        },
        "Handler": "lambda.generate",
        "Role": {
          "Fn::GetAtt": [
            "generateServiceRole6D137BEE",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "generateServiceRole6D137BEE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "generateServiceRoleDefaultPolicy3181BDB4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TableCD117FA1",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "generateServiceRoleDefaultPolicy3181BDB4",
        "Roles": [
          {
            "Ref": "generateServiceRole6D137BEE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "goA2F7D26A": {
      "DependsOn": [
        "goServiceRoleDefaultPolicyC12C67B8",
        "goServiceRole24663994",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "9b92a0f00164d2164deae8c0588edf6c90b91f08b6e1f2153d07e574b279c2f1.zip",
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "TableCD117FA1",
            },
          },
        },
        "Handler": "lambda.go",
        "Role": {
          "Fn::GetAtt": [
            "goServiceRole24663994",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "goServiceRole24663994": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "goServiceRoleDefaultPolicyC12C67B8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TableCD117FA1",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "goServiceRoleDefaultPolicyC12C67B8",
        "Roles": [
          {
            "Ref": "goServiceRole24663994",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "urlshortenerapi76E828B8": {
      "Properties": {
        "Description": "This service generates and serves shortened URLs.",
        "Name": "URL Shortener Service",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "urlshortenerapiAccount6CDC7B9F": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "urlshortenerapi76E828B8",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "urlshortenerapiCloudWatchRole074E5A2C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "urlshortenerapiCloudWatchRole074E5A2C": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "urlshortenerapiDeploymentF8EB06A05378733b9745fd916e6e2ab2dc795cb0": {
      "DependsOn": [
        "urlshortenerapigenOPTIONSD52D3E40",
        "urlshortenerapigenPOSTB2E3C9BF",
        "urlshortenerapigenAE37B25E",
        "urlshortenerapigoidGET3D079735",
        "urlshortenerapigoidOPTIONS996FF32D",
        "urlshortenerapigoid75A6B935",
        "urlshortenerapigoOPTIONS19D626C3",
        "urlshortenerapigoBA33187F",
        "urlshortenerapiOPTIONS8F59338E",
      ],
      "Properties": {
        "Description": "This service generates and serves shortened URLs.",
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "urlshortenerapiDeploymentStageprod75F44E58": {
      "DependsOn": [
        "urlshortenerapiAccount6CDC7B9F",
      ],
      "Properties": {
        "DeploymentId": {
          "Ref": "urlshortenerapiDeploymentF8EB06A05378733b9745fd916e6e2ab2dc795cb0",
        },
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "urlshortenerapiOPTIONS8F59338E": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "urlshortenerapi76E828B8",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "urlshortenerapigenAE37B25E": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "urlshortenerapi76E828B8",
            "RootResourceId",
          ],
        },
        "PathPart": "gen",
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "urlshortenerapigenOPTIONSD52D3E40": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "urlshortenerapigenAE37B25E",
        },
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "urlshortenerapigenPOSTApiPermissionMyTestStackurlshortenerapiCC655803POSTgen472D3F19": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "generate532CE211",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "urlshortenerapi76E828B8",
              },
              "/",
              {
                "Ref": "urlshortenerapiDeploymentStageprod75F44E58",
              },
              "/POST/gen",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "urlshortenerapigenPOSTApiPermissionTestMyTestStackurlshortenerapiCC655803POSTgenF12F3605": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "generate532CE211",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "urlshortenerapi76E828B8",
              },
              "/test-invoke-stage/POST/gen",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "urlshortenerapigenPOSTB2E3C9BF": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{ "statusCode": "200" }",
          },
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "generate532CE211",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "urlshortenerapigenAE37B25E",
        },
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "urlshortenerapigoBA33187F": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "urlshortenerapi76E828B8",
            "RootResourceId",
          ],
        },
        "PathPart": "go",
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "urlshortenerapigoOPTIONS19D626C3": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "urlshortenerapigoBA33187F",
        },
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "urlshortenerapigoid75A6B935": {
      "Properties": {
        "ParentId": {
          "Ref": "urlshortenerapigoBA33187F",
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "urlshortenerapigoidGET3D079735": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{ "statusCode": "200" }",
          },
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "goA2F7D26A",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "urlshortenerapigoid75A6B935",
        },
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "urlshortenerapigoidGETApiPermissionMyTestStackurlshortenerapiCC655803GETgoidEB4EE08F": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "goA2F7D26A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "urlshortenerapi76E828B8",
              },
              "/",
              {
                "Ref": "urlshortenerapiDeploymentStageprod75F44E58",
              },
              "/GET/go/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "urlshortenerapigoidGETApiPermissionTestMyTestStackurlshortenerapiCC655803GETgoidE050589C": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "goA2F7D26A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "urlshortenerapi76E828B8",
              },
              "/test-invoke-stage/GET/go/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "urlshortenerapigoidOPTIONS996FF32D": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "urlshortenerapigoid75A6B935",
        },
        "RestApiId": {
          "Ref": "urlshortenerapi76E828B8",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
